// Generated by view binder compiler. Do not edit!
package com.example.appa.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.appa.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button aroundMeButton;

  @NonNull
  public final BottomNavigationView bottomNavigation;

  @NonNull
  public final Button connectButton;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final Button directoryButton;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final Button navigationButton;

  @NonNull
  public final MaterialToolbar topAppBar;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppBarLayout appBarLayout, @Nullable Button aroundMeButton,
      @NonNull BottomNavigationView bottomNavigation, @NonNull Button connectButton,
      @Nullable Button directoryButton, @NonNull LinearLayout linearLayout,
      @NonNull Button navigationButton, @NonNull MaterialToolbar topAppBar) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.aroundMeButton = aroundMeButton;
    this.bottomNavigation = bottomNavigation;
    this.connectButton = connectButton;
    this.directoryButton = directoryButton;
    this.linearLayout = linearLayout;
    this.navigationButton = navigationButton;
    this.topAppBar = topAppBar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = rootView.findViewById(id);
      if (appBarLayout == null) {
        break missingId;
      }

      Button aroundMeButton = rootView.findViewById(R.id.around_me_button);

      id = R.id.bottom_navigation;
      BottomNavigationView bottomNavigation = rootView.findViewById(id);
      if (bottomNavigation == null) {
        break missingId;
      }

      id = R.id.connect_button;
      Button connectButton = rootView.findViewById(id);
      if (connectButton == null) {
        break missingId;
      }

      Button directoryButton = rootView.findViewById(R.id.directory_button);

      id = R.id.linearLayout;
      LinearLayout linearLayout = rootView.findViewById(id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.navigation_button;
      Button navigationButton = rootView.findViewById(id);
      if (navigationButton == null) {
        break missingId;
      }

      id = R.id.topAppBar;
      MaterialToolbar topAppBar = rootView.findViewById(id);
      if (topAppBar == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, appBarLayout, aroundMeButton,
          bottomNavigation, connectButton, directoryButton, linearLayout, navigationButton,
          topAppBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
